package com.js.worker.code;

import java.io.File;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Test {
	
	public static int removeDuplicates(int[] nums) {
		Arrays.sort(nums);
		int num = 0;

		if (nums.length == 1) {
			num++;
		} else {
			for (int i = 0; i < nums.length - 1; i++) {
				if (nums[i] == nums[i + 1]) {
					if (i + 1 == nums.length - 1) {
						nums[num] = nums[i + 1];
						num++;
					}
				} else {
					nums[num] = nums[i];
					num++;
					if (i + 1 == nums.length - 1) {
						nums[num] = nums[i + 1];
						num++;
					}

				}
			}
		}

		return num;

	}
	
	public int firstUniqChar(String s) {
        Map<String,Integer> record = new HashMap<String, Integer>();
        for(int i =0; i<s.length();i++) {
        	String key = s.substring(i, i+1);
        	if(record.containsKey(key)) {
        		int value = record.get(key) +1;
        		record.put(key, value);
        	}else {
        		System.out.println(key);
        		record.put(key, 0);
        	}
        }
        System.out.println("=====================");
        System.out.println(record.toString());
        for(String k : record.keySet()) {
        	System.out.println(k);
        	if(record.get(k) == 0) {
        		return s.indexOf(k);
        	}
        }
		return -1;
        
    }
	
    public static int bytesToInt(byte[] src, int offset) {  
    	int value = 0;
		if(src == null) {
			 throw new NullPointerException();
		}else if(offset < 0 || offset >= src.length) {
			throw new IndexOutOfBoundsException();
		}
		for(int i=0; i<src.length; i++) {
			value |= (src[offset + i] & 0xFF) << (8 * (src.length - 1 -i));
			System.out.println(value);
		}
		return value;
    } 

	public static void main(String[] args) {
		int c = '\n';
		System.out.println(c);
//		int[] nums = {-1};	
//		int len = Test.removeDuplicates(nums);
//		for(int i =0; i<len; i++) {
//			System.out.println(nums[i]);
//		}
		String string = "dasdadas sa,";
//		StringBuilder sb = new StringBuilder();
//		for(int i=string.length()-1;i>=0;i--) {
//			sb.append(string.substring(i, i+1));
//		}
//		System.out.println(sb.toString());
//		Test test = new Test();
//		System.out.println(test.firstUniqChar("leetcode"));
		
//		byte[] msg = {42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 102, 114, 101, 115, 104, 32, 100, 121, 110, 97, 109, 105, 99, 32, 116, 97, 98, 108, 101, 32, 91, 72, 66, 95, 65, 67, 67, 79, 85, 78, 84, 95, 53, 53, 49, 93, 32, 98, 101, 103, 105, 110, 110, 105, 110, 103, 46, 46, 46, 32, 46, 46, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 102, 114, 101, 115, 104, 32, 100, 121, 110, 97, 109, 105, 99, 32, 116, 97, 98, 108, 101, 32, 91, 72, 66, 95, 65, 67, 67, 79, 85, 78, 84, 95, 53, 53, 49, 93, 32, 101, 110, 100, 44, 32, 108, 111, 97, 100, 101, 100, 32, 91, 48, 93, 32, 32, 114, 101, 99, 111, 114, 100, 115, 10, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 10, 0, 0, -92, 32, 50, 52, 56, 99, 100, 102, 50, 51, 48, 100, 48, 97, 52, 101, 102, 97, 98, 50, 100, 102, 55, 97, 53, 102, 52, 102, 100, 101, 50, 57, 99, 98, 18, 50, 54, 53, 49, 48, 52, 56, 56, 49, 52, 48, 55, 53, 48, 52, 51, 56, 52, 1, 48, 0, 17, 116, 111, 107, 101, 110, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0, 85, 123, 32, 34, 116, 111, 107, 101, 110, 34, 58, 32, 123, 32, 34, 98, 105, 108, 108, 105, 110, 103, 95, 99, 121, 99, 108, 101, 95, 105, 100, 34, 58, 32, 34, 50, 48, 49, 56, 49, 49, 34, 44, 32, 34, 108, 97, 116, 110, 95, 105, 100, 34, 58, 32, 34, 53, 53, 49, 34, 44, 32, 34, 112, 114, 111, 99, 95, 116, 121, 112, 101, 95, 105, 100, 34, 58, 32, 34, 49, 50, 34, 32, 125, 32, 125, 10, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 102, 114, 101, 115, 104, 32, 100, 121, 110, 97, 109, 105, 99, 32, 116, 97, 98, 108, 101, 32, 91, 72, 66, 95, 65, 67, 67, 79, 85, 78, 84, 95, 53, 53, 49, 93, 32, 98, 101, 103, 105, 110, 110, 105, 110, 103, 46, 46, 46, 32, 46, 46, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 102, 114, 101, 115, 104, 32, 100, 121, 110, 97, 109, 105, 99, 32, 116, 97, 98, 108, 101, 32, 91, 72, 66, 95, 65, 67, 67, 79, 85, 78, 84, 95, 53, 53, 49, 93, 32, 101, 110, 100, 44, 32, 108, 111, 97, 100, 101, 100, 32, 91, 48, 93, 32, 32, 114, 101, 99, 111, 114, 100, 115, 10, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 10, 10, 0, 0, -92, 32, 101, 50, 49, 97, 51, 57, 49, 98, 101, 55, 101, 98, 52, 101, 97, 98, 57, 54, 102, 57, 50, 56, 100, 56, 50, 48, 97, 50, 48, 49, 55, 52, 18, 50, 54, 53, 49, 49, 50, 55, 53, 50, 48, 53, 54, 55, 48, 57, 49, 50, 48, 1, 48, 0, 17, 116, 111, 107, 101, 110, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0, 85, 123, 32, 34, 116, 111, 107, 101, 110, 34, 58, 32, 123, 32, 34, 98, 105, 108, 108, 105, 110, 103, 95, 99, 121, 99, 108, 101, 95, 105, 100, 34, 58, 32, 34, 50, 48, 49, 56, 49, 49, 34, 44, 32, 34, 108, 97, 116, 110, 95, 105, 100, 34, 58, 32, 34, 53, 53, 49, 34, 44, 32, 34, 112, 114, 111, 99, 95, 116, 121, 112, 101, 95, 105, 100, 34, 58, 32, 34, 49, 50, 34, 32, 125, 32, 125};
//		
//		String str = "";
//		for(byte b : msg) {
//			str += (char)b;
//		}
//		System.out.println(str);
		
		File file = new File("C:\\work\\test\\test_1\\test_12");
		if(!file.exists()) 
			file.mkdirs();
	}
//d s
	
}
